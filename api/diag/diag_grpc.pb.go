// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package diag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DiagsClient is the client API for Diags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiagsClient interface {
	Echo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DiagResponse, error)
}

type diagsClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagsClient(cc grpc.ClientConnInterface) DiagsClient {
	return &diagsClient{cc}
}

func (c *diagsClient) Echo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DiagResponse, error) {
	out := new(DiagResponse)
	err := c.cc.Invoke(ctx, "/cacheroach.diag.Diags/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagsServer is the server API for Diags service.
// All implementations must embed UnimplementedDiagsServer
// for forward compatibility
type DiagsServer interface {
	Echo(context.Context, *emptypb.Empty) (*DiagResponse, error)
	mustEmbedUnimplementedDiagsServer()
}

// UnimplementedDiagsServer must be embedded to have forward compatible implementations.
type UnimplementedDiagsServer struct {
}

func (UnimplementedDiagsServer) Echo(context.Context, *emptypb.Empty) (*DiagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedDiagsServer) mustEmbedUnimplementedDiagsServer() {}

// UnsafeDiagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiagsServer will
// result in compilation errors.
type UnsafeDiagsServer interface {
	mustEmbedUnimplementedDiagsServer()
}

func RegisterDiagsServer(s grpc.ServiceRegistrar, srv DiagsServer) {
	s.RegisterService(&_Diags_serviceDesc, srv)
}

func _Diags_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagsServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheroach.diag.Diags/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagsServer).Echo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Diags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cacheroach.diag.Diags",
	HandlerType: (*DiagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Diags_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diag.proto",
}
