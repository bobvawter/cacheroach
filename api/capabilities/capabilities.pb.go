// Copyright 2021 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: capabilities.proto

package capabilities

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Direction int32

const (
	Direction_INVALID_DIRECTION Direction = 0
	Direction_REQUEST           Direction = 1
	Direction_RESPONSE          Direction = 2
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "INVALID_DIRECTION",
		1: "REQUEST",
		2: "RESPONSE",
	}
	Direction_value = map[string]int32{
		"INVALID_DIRECTION": 0,
		"REQUEST":           1,
		"RESPONSE":          2,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_capabilities_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_capabilities_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{0}
}

type ContextReference int32

const (
	ContextReference_INVALID_CONTEXT           ContextReference = 0
	ContextReference_SESSION_PRINCIPAL         ContextReference = 1 // The principal that is making the request.
	ContextReference_SCOPE_TENANT              ContextReference = 2 // The tenant that is embedded in the session's scope.
	ContextReference_SCOPE_PRINCIPAL           ContextReference = 3 // The principal embedded in the session's scope.
	ContextReference_UNAUTHENTICATED_PRINCIPAL ContextReference = 4 // A well-known ID for an unauthorized request.
	ContextReference_VHOST_TENANT              ContextReference = 5 // The tenant associated with a virtual-host.
)

// Enum value maps for ContextReference.
var (
	ContextReference_name = map[int32]string{
		0: "INVALID_CONTEXT",
		1: "SESSION_PRINCIPAL",
		2: "SCOPE_TENANT",
		3: "SCOPE_PRINCIPAL",
		4: "UNAUTHENTICATED_PRINCIPAL",
		5: "VHOST_TENANT",
	}
	ContextReference_value = map[string]int32{
		"INVALID_CONTEXT":           0,
		"SESSION_PRINCIPAL":         1,
		"SCOPE_TENANT":              2,
		"SCOPE_PRINCIPAL":           3,
		"UNAUTHENTICATED_PRINCIPAL": 4,
		"VHOST_TENANT":              5,
	}
)

func (x ContextReference) Enum() *ContextReference {
	p := new(ContextReference)
	*p = x
	return p
}

func (x ContextReference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextReference) Descriptor() protoreflect.EnumDescriptor {
	return file_capabilities_proto_enumTypes[1].Descriptor()
}

func (ContextReference) Type() protoreflect.EnumType {
	return &file_capabilities_proto_enumTypes[1]
}

func (x ContextReference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContextReference.Descriptor instead.
func (ContextReference) EnumDescriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{1}
}

type Rule_AuthStatus int32

const (
	// Require credentials.
	Rule_LOGGED_IN Rule_AuthStatus = 0
	// Always allow access, even to unauthenticated callers.
	Rule_PUBLIC Rule_AuthStatus = 1
	// Require super-token access. This is the default.
	Rule_SUPER Rule_AuthStatus = 2
)

// Enum value maps for Rule_AuthStatus.
var (
	Rule_AuthStatus_name = map[int32]string{
		0: "LOGGED_IN",
		1: "PUBLIC",
		2: "SUPER",
	}
	Rule_AuthStatus_value = map[string]int32{
		"LOGGED_IN": 0,
		"PUBLIC":    1,
		"SUPER":     2,
	}
)

func (x Rule_AuthStatus) Enum() *Rule_AuthStatus {
	p := new(Rule_AuthStatus)
	*p = x
	return p
}

func (x Rule_AuthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_AuthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_capabilities_proto_enumTypes[2].Descriptor()
}

func (Rule_AuthStatus) Type() protoreflect.EnumType {
	return &file_capabilities_proto_enumTypes[2]
}

func (x Rule_AuthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_AuthStatus.Descriptor instead.
func (Rule_AuthStatus) EnumDescriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{5, 0}
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General model property access.
	Read bool `protobuf:"varint,1,opt,name=read,proto3" json:"read,omitempty"`
	// General model property access.
	Write bool `protobuf:"varint,2,opt,name=write,proto3" json:"write,omitempty"`
	// Grants the ability to create additional access tokens.
	Delegate bool `protobuf:"varint,3,opt,name=delegate,proto3" json:"delegate,omitempty"`
	// Grants access to personally-identifying information.
	Pii bool `protobuf:"varint,4,opt,name=pii,proto3" json:"pii,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{0}
}

func (x *Capabilities) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *Capabilities) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

func (x *Capabilities) GetDelegate() bool {
	if x != nil {
		return x.Delegate
	}
	return false
}

func (x *Capabilities) GetPii() bool {
	if x != nil {
		return x.Pii
	}
	return false
}

// Reference to an ID.
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Reference_Context
	//	*Reference_Field
	//	*Reference_StringValue
	Kind isReference_Kind `protobuf_oneof:"Kind"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{1}
}

func (m *Reference) GetKind() isReference_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Reference) GetContext() ContextReference {
	if x, ok := x.GetKind().(*Reference_Context); ok {
		return x.Context
	}
	return ContextReference_INVALID_CONTEXT
}

func (x *Reference) GetField() int32 {
	if x, ok := x.GetKind().(*Reference_Field); ok {
		return x.Field
	}
	return 0
}

func (x *Reference) GetStringValue() string {
	if x, ok := x.GetKind().(*Reference_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isReference_Kind interface {
	isReference_Kind()
}

type Reference_Context struct {
	Context ContextReference `protobuf:"varint,1,opt,name=context,proto3,enum=cacheroach.capabilities.ContextReference,oneof"`
}

type Reference_Field struct {
	Field int32 `protobuf:"varint,2,opt,name=field,proto3,oneof"`
}

type Reference_StringValue struct {
	// A literal string value.
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*Reference_Context) isReference_Kind() {}

func (*Reference_Field) isReference_Kind() {}

func (*Reference_StringValue) isReference_Kind() {}

// Analog of session.Location.
type LocationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId *Reference `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Path     *Reference `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LocationReference) Reset() {
	*x = LocationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationReference) ProtoMessage() {}

func (x *LocationReference) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationReference.ProtoReflect.Descriptor instead.
func (*LocationReference) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{2}
}

func (x *LocationReference) GetTenantId() *Reference {
	if x != nil {
		return x.TenantId
	}
	return nil
}

func (x *LocationReference) GetPath() *Reference {
	if x != nil {
		return x.Path
	}
	return nil
}

// Analog of session.Scope.
type ScopeReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*ScopeReference_SuperToken
	//	*ScopeReference_OnPrincipal
	//	*ScopeReference_OnLocation
	Kind isScopeReference_Kind `protobuf_oneof:"Kind"`
}

func (x *ScopeReference) Reset() {
	*x = ScopeReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeReference) ProtoMessage() {}

func (x *ScopeReference) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeReference.ProtoReflect.Descriptor instead.
func (*ScopeReference) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{3}
}

func (m *ScopeReference) GetKind() isScopeReference_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ScopeReference) GetSuperToken() bool {
	if x, ok := x.GetKind().(*ScopeReference_SuperToken); ok {
		return x.SuperToken
	}
	return false
}

func (x *ScopeReference) GetOnPrincipal() *Reference {
	if x, ok := x.GetKind().(*ScopeReference_OnPrincipal); ok {
		return x.OnPrincipal
	}
	return nil
}

func (x *ScopeReference) GetOnLocation() *LocationReference {
	if x, ok := x.GetKind().(*ScopeReference_OnLocation); ok {
		return x.OnLocation
	}
	return nil
}

type isScopeReference_Kind interface {
	isScopeReference_Kind()
}

type ScopeReference_SuperToken struct {
	SuperToken bool `protobuf:"varint,1,opt,name=super_token,json=superToken,proto3,oneof"`
}

type ScopeReference_OnPrincipal struct {
	OnPrincipal *Reference `protobuf:"bytes,2,opt,name=on_principal,json=onPrincipal,proto3,oneof"`
}

type ScopeReference_OnLocation struct {
	OnLocation *LocationReference `protobuf:"bytes,3,opt,name=on_location,json=onLocation,proto3,oneof"`
}

func (*ScopeReference_SuperToken) isScopeReference_Kind() {}

func (*ScopeReference_OnPrincipal) isScopeReference_Kind() {}

func (*ScopeReference_OnLocation) isScopeReference_Kind() {}

// Analog of session.Session.
type SessionReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities *Capabilities   `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	Scope        *ScopeReference `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *SessionReference) Reset() {
	*x = SessionReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionReference) ProtoMessage() {}

func (x *SessionReference) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionReference.ProtoReflect.Descriptor instead.
func (*SessionReference) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{4}
}

func (x *SessionReference) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *SessionReference) GetScope() *ScopeReference {
	if x != nil {
		return x.Scope
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Rule_Eq_
	//	*Rule_Not
	//	*Rule_Never
	//	*Rule_And_
	//	*Rule_Or_
	//	*Rule_AuthStatus_
	//	*Rule_May
	//	*Rule_Direction
	//	*Rule_IsSubset
	Kind isRule_Kind `protobuf_oneof:"Kind"`
	// A message to be returned to the user explaining the rule.
	Message string `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{5}
}

func (m *Rule) GetKind() isRule_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Rule) GetEq() *Rule_Eq {
	if x, ok := x.GetKind().(*Rule_Eq_); ok {
		return x.Eq
	}
	return nil
}

func (x *Rule) GetNot() *Rule {
	if x, ok := x.GetKind().(*Rule_Not); ok {
		return x.Not
	}
	return nil
}

func (x *Rule) GetNever() bool {
	if x, ok := x.GetKind().(*Rule_Never); ok {
		return x.Never
	}
	return false
}

func (x *Rule) GetAnd() *Rule_And {
	if x, ok := x.GetKind().(*Rule_And_); ok {
		return x.And
	}
	return nil
}

func (x *Rule) GetOr() *Rule_Or {
	if x, ok := x.GetKind().(*Rule_Or_); ok {
		return x.Or
	}
	return nil
}

func (x *Rule) GetAuthStatus() Rule_AuthStatus {
	if x, ok := x.GetKind().(*Rule_AuthStatus_); ok {
		return x.AuthStatus
	}
	return Rule_LOGGED_IN
}

func (x *Rule) GetMay() *SessionReference {
	if x, ok := x.GetKind().(*Rule_May); ok {
		return x.May
	}
	return nil
}

func (x *Rule) GetDirection() Direction {
	if x, ok := x.GetKind().(*Rule_Direction); ok {
		return x.Direction
	}
	return Direction_INVALID_DIRECTION
}

func (x *Rule) GetIsSubset() bool {
	if x, ok := x.GetKind().(*Rule_IsSubset); ok {
		return x.IsSubset
	}
	return false
}

func (x *Rule) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type isRule_Kind interface {
	isRule_Kind()
}

type Rule_Eq_ struct {
	// Requires equality.
	Eq *Rule_Eq `protobuf:"bytes,1,opt,name=eq,proto3,oneof"`
}

type Rule_Not struct {
	// Inverts the enclosed rule.
	Not *Rule `protobuf:"bytes,2,opt,name=not,proto3,oneof"`
}

type Rule_Never struct {
	// A rule that never matches.
	Never bool `protobuf:"varint,3,opt,name=never,proto3,oneof"`
}

type Rule_And_ struct {
	// Conjunction.
	And *Rule_And `protobuf:"bytes,4,opt,name=and,proto3,oneof"`
}

type Rule_Or_ struct {
	// Disjunction.
	Or *Rule_Or `protobuf:"bytes,5,opt,name=or,proto3,oneof"`
}

type Rule_AuthStatus_ struct {
	// General authentication status.
	AuthStatus Rule_AuthStatus `protobuf:"varint,6,opt,name=auth_status,json=authStatus,proto3,enum=cacheroach.capabilities.Rule_AuthStatus,oneof"`
}

type Rule_May struct {
	May *SessionReference `protobuf:"bytes,7,opt,name=may,proto3,oneof"`
}

type Rule_Direction struct {
	// The request direction.
	Direction Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=cacheroach.capabilities.Direction,oneof"`
}

type Rule_IsSubset struct {
	// Applies to session.Session; indicates that the session must be a
	// subset of the principal's scopes.
	IsSubset bool `protobuf:"varint,9,opt,name=is_subset,json=isSubset,proto3,oneof"`
}

func (*Rule_Eq_) isRule_Kind() {}

func (*Rule_Not) isRule_Kind() {}

func (*Rule_Never) isRule_Kind() {}

func (*Rule_And_) isRule_Kind() {}

func (*Rule_Or_) isRule_Kind() {}

func (*Rule_AuthStatus_) isRule_Kind() {}

func (*Rule_May) isRule_Kind() {}

func (*Rule_Direction) isRule_Kind() {}

func (*Rule_IsSubset) isRule_Kind() {}

type Rule_And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule []*Rule `protobuf:"bytes,1,rep,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Rule_And) Reset() {
	*x = Rule_And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_And) ProtoMessage() {}

func (x *Rule_And) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_And.ProtoReflect.Descriptor instead.
func (*Rule_And) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Rule_And) GetRule() []*Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type Rule_Eq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *Reference `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B *Reference `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Rule_Eq) Reset() {
	*x = Rule_Eq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Eq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Eq) ProtoMessage() {}

func (x *Rule_Eq) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Eq.ProtoReflect.Descriptor instead.
func (*Rule_Eq) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Rule_Eq) GetA() *Reference {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *Rule_Eq) GetB() *Reference {
	if x != nil {
		return x.B
	}
	return nil
}

type Rule_Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule []*Rule `protobuf:"bytes,1,rep,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Rule_Or) Reset() {
	*x = Rule_Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capabilities_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Or) ProtoMessage() {}

func (x *Rule_Or) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Or.ProtoReflect.Descriptor instead.
func (*Rule_Or) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Rule_Or) GetRule() []*Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

var file_capabilities_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*Rule)(nil),
		Field:         55123,
		Name:          "cacheroach.capabilities.msg_rule",
		Tag:           "bytes,55123,opt,name=msg_rule",
		Filename:      "capabilities.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Rule)(nil),
		Field:         55123,
		Name:          "cacheroach.capabilities.field_rule",
		Tag:           "bytes,55123,opt,name=field_rule",
		Filename:      "capabilities.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Rule)(nil),
		Field:         55123,
		Name:          "cacheroach.capabilities.method_rule",
		Tag:           "bytes,55123,opt,name=method_rule",
		Filename:      "capabilities.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional cacheroach.capabilities.Rule msg_rule = 55123;
	E_MsgRule = &file_capabilities_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// Applies the given requirements if the field is set.
	//
	// optional cacheroach.capabilities.Rule field_rule = 55123;
	E_FieldRule = &file_capabilities_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional cacheroach.capabilities.Rule method_rule = 55123;
	E_MethodRule = &file_capabilities_proto_extTypes[2]
)

var File_capabilities_proto protoreflect.FileDescriptor

var file_capabilities_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68,
	0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x66, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x70, 0x69, 0x69, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x4b, 0x69, 0x6e,
	0x64, 0x22, 0x8c, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12,
	0x4d, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63,
	0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61,
	0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x92, 0x06, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x71, 0x48, 0x00, 0x52, 0x02,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x03, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x6e, 0x64, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x4f, 0x72, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x03, 0x6d, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x6d, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x38, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x1a, 0x68, 0x0a, 0x02, 0x45,
	0x71, 0x12, 0x30, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x01, 0x61, 0x12, 0x30, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x01, 0x62, 0x1a, 0x37, 0x0a, 0x02, 0x4f, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x32,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x2a, 0x3d, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x96, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x56, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x10, 0x05, 0x3a, 0x5b, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd3, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x6f, 0x61, 0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x3a,
	0x5d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd3, 0xae, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61, 0x63,
	0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x3a, 0x60,
	0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd3, 0xae,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f, 0x61,
	0x63, 0x68, 0x2e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x6f, 0x62, 0x76, 0x61, 0x77, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x72, 0x6f,
	0x61, 0x63, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_capabilities_proto_rawDescOnce sync.Once
	file_capabilities_proto_rawDescData = file_capabilities_proto_rawDesc
)

func file_capabilities_proto_rawDescGZIP() []byte {
	file_capabilities_proto_rawDescOnce.Do(func() {
		file_capabilities_proto_rawDescData = protoimpl.X.CompressGZIP(file_capabilities_proto_rawDescData)
	})
	return file_capabilities_proto_rawDescData
}

var file_capabilities_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_capabilities_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_capabilities_proto_goTypes = []interface{}{
	(Direction)(0),                      // 0: cacheroach.capabilities.Direction
	(ContextReference)(0),               // 1: cacheroach.capabilities.ContextReference
	(Rule_AuthStatus)(0),                // 2: cacheroach.capabilities.Rule.AuthStatus
	(*Capabilities)(nil),                // 3: cacheroach.capabilities.Capabilities
	(*Reference)(nil),                   // 4: cacheroach.capabilities.Reference
	(*LocationReference)(nil),           // 5: cacheroach.capabilities.LocationReference
	(*ScopeReference)(nil),              // 6: cacheroach.capabilities.ScopeReference
	(*SessionReference)(nil),            // 7: cacheroach.capabilities.SessionReference
	(*Rule)(nil),                        // 8: cacheroach.capabilities.Rule
	(*Rule_And)(nil),                    // 9: cacheroach.capabilities.Rule.And
	(*Rule_Eq)(nil),                     // 10: cacheroach.capabilities.Rule.Eq
	(*Rule_Or)(nil),                     // 11: cacheroach.capabilities.Rule.Or
	(*descriptorpb.MessageOptions)(nil), // 12: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 13: google.protobuf.FieldOptions
	(*descriptorpb.MethodOptions)(nil),  // 14: google.protobuf.MethodOptions
}
var file_capabilities_proto_depIdxs = []int32{
	1,  // 0: cacheroach.capabilities.Reference.context:type_name -> cacheroach.capabilities.ContextReference
	4,  // 1: cacheroach.capabilities.LocationReference.tenant_id:type_name -> cacheroach.capabilities.Reference
	4,  // 2: cacheroach.capabilities.LocationReference.path:type_name -> cacheroach.capabilities.Reference
	4,  // 3: cacheroach.capabilities.ScopeReference.on_principal:type_name -> cacheroach.capabilities.Reference
	5,  // 4: cacheroach.capabilities.ScopeReference.on_location:type_name -> cacheroach.capabilities.LocationReference
	3,  // 5: cacheroach.capabilities.SessionReference.capabilities:type_name -> cacheroach.capabilities.Capabilities
	6,  // 6: cacheroach.capabilities.SessionReference.scope:type_name -> cacheroach.capabilities.ScopeReference
	10, // 7: cacheroach.capabilities.Rule.eq:type_name -> cacheroach.capabilities.Rule.Eq
	8,  // 8: cacheroach.capabilities.Rule.not:type_name -> cacheroach.capabilities.Rule
	9,  // 9: cacheroach.capabilities.Rule.and:type_name -> cacheroach.capabilities.Rule.And
	11, // 10: cacheroach.capabilities.Rule.or:type_name -> cacheroach.capabilities.Rule.Or
	2,  // 11: cacheroach.capabilities.Rule.auth_status:type_name -> cacheroach.capabilities.Rule.AuthStatus
	7,  // 12: cacheroach.capabilities.Rule.may:type_name -> cacheroach.capabilities.SessionReference
	0,  // 13: cacheroach.capabilities.Rule.direction:type_name -> cacheroach.capabilities.Direction
	8,  // 14: cacheroach.capabilities.Rule.And.rule:type_name -> cacheroach.capabilities.Rule
	4,  // 15: cacheroach.capabilities.Rule.Eq.a:type_name -> cacheroach.capabilities.Reference
	4,  // 16: cacheroach.capabilities.Rule.Eq.b:type_name -> cacheroach.capabilities.Reference
	8,  // 17: cacheroach.capabilities.Rule.Or.rule:type_name -> cacheroach.capabilities.Rule
	12, // 18: cacheroach.capabilities.msg_rule:extendee -> google.protobuf.MessageOptions
	13, // 19: cacheroach.capabilities.field_rule:extendee -> google.protobuf.FieldOptions
	14, // 20: cacheroach.capabilities.method_rule:extendee -> google.protobuf.MethodOptions
	8,  // 21: cacheroach.capabilities.msg_rule:type_name -> cacheroach.capabilities.Rule
	8,  // 22: cacheroach.capabilities.field_rule:type_name -> cacheroach.capabilities.Rule
	8,  // 23: cacheroach.capabilities.method_rule:type_name -> cacheroach.capabilities.Rule
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	21, // [21:24] is the sub-list for extension type_name
	18, // [18:21] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_capabilities_proto_init() }
func file_capabilities_proto_init() {
	if File_capabilities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_capabilities_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Eq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capabilities_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_capabilities_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Reference_Context)(nil),
		(*Reference_Field)(nil),
		(*Reference_StringValue)(nil),
	}
	file_capabilities_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ScopeReference_SuperToken)(nil),
		(*ScopeReference_OnPrincipal)(nil),
		(*ScopeReference_OnLocation)(nil),
	}
	file_capabilities_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Rule_Eq_)(nil),
		(*Rule_Not)(nil),
		(*Rule_Never)(nil),
		(*Rule_And_)(nil),
		(*Rule_Or_)(nil),
		(*Rule_AuthStatus_)(nil),
		(*Rule_May)(nil),
		(*Rule_Direction)(nil),
		(*Rule_IsSubset)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_capabilities_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_capabilities_proto_goTypes,
		DependencyIndexes: file_capabilities_proto_depIdxs,
		EnumInfos:         file_capabilities_proto_enumTypes,
		MessageInfos:      file_capabilities_proto_msgTypes,
		ExtensionInfos:    file_capabilities_proto_extTypes,
	}.Build()
	File_capabilities_proto = out.File
	file_capabilities_proto_rawDesc = nil
	file_capabilities_proto_goTypes = nil
	file_capabilities_proto_depIdxs = nil
}
