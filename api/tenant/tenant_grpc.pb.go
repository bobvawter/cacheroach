// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TenantsClient is the client API for Tenants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantsClient interface {
	Ensure(ctx context.Context, in *EnsureRequest, opts ...grpc.CallOption) (*EnsureResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tenants_ListClient, error)
}

type tenantsClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantsClient(cc grpc.ClientConnInterface) TenantsClient {
	return &tenantsClient{cc}
}

func (c *tenantsClient) Ensure(ctx context.Context, in *EnsureRequest, opts ...grpc.CallOption) (*EnsureResponse, error) {
	out := new(EnsureResponse)
	err := c.cc.Invoke(ctx, "/cacheroach.tenant.Tenants/Ensure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/cacheroach.tenant.Tenants/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Tenants_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tenants_serviceDesc.Streams[0], "/cacheroach.tenant.Tenants/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &tenantsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tenants_ListClient interface {
	Recv() (*Tenant, error)
	grpc.ClientStream
}

type tenantsListClient struct {
	grpc.ClientStream
}

func (x *tenantsListClient) Recv() (*Tenant, error) {
	m := new(Tenant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TenantsServer is the server API for Tenants service.
// All implementations must embed UnimplementedTenantsServer
// for forward compatibility
type TenantsServer interface {
	Ensure(context.Context, *EnsureRequest) (*EnsureResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(*emptypb.Empty, Tenants_ListServer) error
	mustEmbedUnimplementedTenantsServer()
}

// UnimplementedTenantsServer must be embedded to have forward compatible implementations.
type UnimplementedTenantsServer struct {
}

func (UnimplementedTenantsServer) Ensure(context.Context, *EnsureRequest) (*EnsureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ensure not implemented")
}
func (UnimplementedTenantsServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTenantsServer) List(*emptypb.Empty, Tenants_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTenantsServer) mustEmbedUnimplementedTenantsServer() {}

// UnsafeTenantsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantsServer will
// result in compilation errors.
type UnsafeTenantsServer interface {
	mustEmbedUnimplementedTenantsServer()
}

func RegisterTenantsServer(s grpc.ServiceRegistrar, srv TenantsServer) {
	s.RegisterService(&_Tenants_serviceDesc, srv)
}

func _Tenants_Ensure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).Ensure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheroach.tenant.Tenants/Ensure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).Ensure(ctx, req.(*EnsureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cacheroach.tenant.Tenants/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TenantsServer).List(m, &tenantsListServer{stream})
}

type Tenants_ListServer interface {
	Send(*Tenant) error
	grpc.ServerStream
}

type tenantsListServer struct {
	grpc.ServerStream
}

func (x *tenantsListServer) Send(m *Tenant) error {
	return x.ServerStream.SendMsg(m)
}

var _Tenants_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cacheroach.tenant.Tenants",
	HandlerType: (*TenantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ensure",
			Handler:    _Tenants_Ensure_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tenants_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Tenants_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tenant.proto",
}
